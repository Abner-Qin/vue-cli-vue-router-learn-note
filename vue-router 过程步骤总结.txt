由于Vue在开发时对路由支持的不足，后来官方补充了vue-router插件，它在Vue的生态环境中非常重要，在实际开发中只要编写一个页面就会操作vue-router。要学习vue-router就要先知道这里的路由是什么？这里的路由并不是指我们平时所说的硬件路由器，这里的路由就是SPA（单页应用）的路径管理器。再通俗的说，vue-router就是我们WebApp的链接路径管理系统。

安装vue-router
vue-router是一个插件包，所以我们还是需要用npm来进行安装的。打开命令行工具，进入你的项目目录，输入下面命令。
npm install vue-router --save-dev

在src/components目录下，新建 Hi.vue 文件。
<template>
  <div class="hello">
    <h1>{{ msg }}</h1>
  </div>
</template>
 
<script>
export default {
  name: 'hi',
  data () {
    return {
      msg: 'Hi, I am JSPang'
    }
  }
}
</script>
 
 
<style scoped>
 
</style>
在router/index.js文件的上边引入Hi组件并增加路由配置
import Hi from '@/components/Hi'
{
  path:'/hi',
  name:'Hi',
  component:Hi
}

完整文件

import Vue from 'vue'   //引入Vue
import Router from 'vue-router'  //引入vue-router
import Hello from '@/components/Hello'  //引入根目录下的Hello.vue组件
import Hi from '@/components/Hi' 
 
Vue.use(Router)  //Vue全局使用Router
 
export default new Router({
  routes: [              //配置路由，这里是个数组
    {                    //每一个链接都是一个对象
      path: '/',         //链接路径
      name: 'Hello',     //路由名称，
      component: Hello   //对应的组件模板
    },{
      path:'/hi',
      name:'Hi',
      component:Hi
    }
  ]
})
App.vue中
 <router-link to="/">显示字段</router-link>
to：是我们的导航路径，要填写的是你在router/index.js文件里配置的path值，如果要导航到默认首页，只需要写成  to=”/”  ，
[显示字段] ：就是我们要显示给用户的导航名称，比如首页  新闻页。

例
<p>导航 ：
   <router-link to="/">首页</router-link>
   <router-link to="/hi">Hi页面</router-link>
</p>

二.配置子路由
例
App.vue
<p>导航 ：
      <router-link to="/">首页</router-link> | 
      <router-link to="/hi">Hi页面</router-link> |
      <router-link to="/hi/hi1">-Hi页面1</router-link> |
      <router-link to="/hi/hi2">-Hi页面2</router-link>
</p>
把Hi.vue改成一个通用的模板，加入<router-view>标签，给子模板提供插入位置。“Hi页面1”   和 “Hi页面2”  都相当于“Hi页面”的子页面，有点想继承关系。我们在“Hi页面”里加入<router-view>标签。
在原本页面中加入<router-view></router-view>
新建Hi1.vue和Hi2.vue和原本的Hi.vue差不多
修改router/index.js代码
引入H1.vue,H2.vue，子路由的写法是在原有的路由配置下加入children字段。
import Vue from 'vue'   
import Router from 'vue-router'  
import Hello from '@/components/Hello'  
import Hi from '@/components/Hi' 
import Hi1 from '@/components/Hi1' 
import Hi2 from '@/components/Hi2' 
 
Vue.use(Router) 
 
export default new Router({
  routes: [             
    {                    
      path: '/',        
      name: 'Hello',     
      component: Hello   
    },{
      path:'/hi',
      component:Hi,
      children:[
        {path:'/',component:Hi},
        {path:'hi1',component:Hi1},
        {path:'hi2',component:Hi2},
      ]
    }
  ]
})

三.vue-router参数传递
第一种两步完成（不常用）
在路由文件src/router/index.js里配置name属性。
routes: [
    {
      path: '/',
      name: 'Hello',
      component: Hello
    }
 ]

在App.vue中用$router.name的形势接收，比如直接在模板中显示：
<p>{{ $router.name}}</p>
第二种方式：通过<router-link> 标签中的to传参（我们多数传参是不用name进行传参的，我们用<router-link>标签中的to属性进行传参，需要您注意的是这里的to要进行一个绑定，写成:to。）
<router-link :to="{name:xxx,params:{key:value}}">valueString</router-link>
例
<router-link :to="{name:'hi1',params:{username:'jspang'}}">Hi页面1</router-link>
name：就是我们在路由配置文件中起的name值。
params：就是我们要传的参数，它也是对象形势，在对象里可以传递多个值。
把src/reouter/index.js文件里给hi1配置的路由起个name,就叫hi1.
{path:'/hi1',name:'hi1',component:Hi1},
最后在模板里(src/components/Hi1.vue)用$route.params.username进行接收.	
{{$route.params.username}}
四：单页面多路由区域操作
例
App.vue
 <router-view ></router-view>
 <router-view name="left" style="float:left;width:50%;background-color:#ccc;height:300px;"></router-view>
 <router-view name="right" style="float:right;width:50%;background-color:#c0c;height:300px;"></router-view>
src/router/index.js
import Vue from 'vue'
import Router from 'vue-router'
import Hello from '@/components/Hello'
import Hi1 from '@/components/Hi1'
import Hi2 from '@/components/Hi2'
 
Vue.use(Router)
 
export default new Router({
  routes: [
    {
      path: '/',
      components: {
        default:Hello,
        left:Hi1,
        right:Hi2
      }
    },{
      path: '/Hi',
      components: {
        default:Hello,
        left:Hi2,
        right:Hi1
      }
    }
 
  ]
})
执行之后点击首页link时左侧颜色#ccc,右侧颜色红色，点击Hi页面正好相反
五：vue-router 利用url传递参数
在实际开发有很多用URL传值的需求，比如我们在新闻列表中有很多新闻标题整齐的排列，我们需要点击每个新闻标题打开不同的新闻内容，这时在跳转路由时跟上新闻编号就十分实用。
:冒号的形式传递参数
例：需要传递参数是新闻ID（newsId）和新闻标题（newsTitle）
/src/router/index.js
{
    path:'/params/:newsId/:newsTitle',
     component:Params
}
在src/components目录下建立params.vue页面
<template>
    <div>
        <h2>{{ msg }}</h2>
        <p>新闻ID：{{ $route.params.newsId}}</p>
        <p>新闻标题：{{ $route.params.newsTitle}}</p>
    </div>
</template>
 
<script>
export default {
  name: 'params',
  data () {
    return {
      msg: 'params page'
    }
  }
}
</script>
<style></style>
App.vue
<router-link to="/params/198/jspang website is very good">params</router-link> 
正则表达式在URL传值中的应用
path:'/params/:newsId(\\d+)/:newsTitle',(传递的新闻ID只能是数字的形式)
六：重定向-redirect
开发中有时候我们虽然设置的路径不一致，但是我们希望跳转到同一个页面，或者说是打开同一个组件。这时候我们就用到了路由的重新定向redirect参数。
App.vue
<router-link to="/goback">goback</router-link> |
/src/router/index.js（把原来的component换成redirect参数就可以了）
export default new Router({
  routes: [
    {
      path: '/',
      component: Hello
    },{
      path:'/params/:newsId(\\d+)/:newsTitle',
      component:Params
    },{
      path:'/goback',
      redirect:'/'
    }
 
  ]
})
这里设置了goback路由，但是并没有配置任何component（组件/页面），而是直接redirect到path:’/’下了，这就是一个简单的重新定向，点击之后直接跳到根页面也就是首页下。
重定向时传递参数
/src/router/index.js
{
  path:'/params/:newsId(\\d+)/:newsTitle',
  component:Params
},{
  path:'/goParams/:newsId(\\d+)/:newsTitle',
  redirect:'/params/:newsId(\\d+)/:newsTitle'

}
App.vue
<router-link to="/params/198/jspang website is very good">params</router-link>
<router-link to="/goParams/918/I like vue js">goParams</router-link>
七：alias别名的使用(别名用在path为’/’根目录中是不起作用的)
/src/router/index.js（给hi1起一个别名jspang）
{
    path: '/hi1',
    component: Hi1,
    alias:'/jspang'
 }
App.vue
<router-link to="/jspang">jspang</router-link>

redirect和alias的区别
redirect：仔细观察URL，redirect是直接改变了url的值，把url变成了真实的path路径。
alias：URL路径没有别改变，这种情况更友好，让用户知道自己访问的路径，只是改变了<router-view>中的内容。
八：路由的过渡动画
<transition>标签
App.vue
<transition name="fade" mode="out-in">
  <router-view ></router-view>
</transition>
<style>
.fade-enter {
  opacity:0;
}
.fade-leave{
  opacity:1;
}
.fade-enter-active{
  transition:opacity .5s;
}
.fade-leave-active{
  opacity:0;
  transition:opacity .5s;
}
过渡模式mode：(默认的mode模式in-out模式)
in-out:新元素先进入过渡，完成之后当前元素过渡离开。
out-in:当前元素先进行过渡离开，离开完成后新元素过渡进入。
</style>
九：mode的设置和404页面的处理
// mode:'history',
	
mode:'hash',
{
    path: '/hi1',
    component: Hi1
 }
默认：mode:'hash',（url链接后跟一个“#”号）例file:///E:/vue2.0demo/vue-cli/vuecliTest/dist/index.html#/
mode:'history',
（去除“#”号）
404页面的设置：
用户会经常输错页面，当用户输错页面时，我们希望给他一个友好的提示，为此美工都会设计一个漂亮的页面，这个页面就是我们常说的404页面。vue-router也为我们提供了这样的机制.
/src/router/index.js
{
   path:'*',
   component:Error
}
这里的path:’*’就是找不到页面时的配置，component是我们新建的一个Error.vue的文件。
Error.vue
<template>
    <div>
        <h2>{{ msg }}</h2>
    </div>
</template>
<script>
export default {
  data () {
    return {
      msg: 'Error:404'
    }
  }
}
</script>
在App.vue中写
<router-link to="/bbbbbb">我是瞎写的</router-link> |点击就出现了一个Error 404页面
十：路由中的钩子
/src/router/index.js中的钩子函数只能写一个beforeEnter,就是在进入此路由配置时。
例
{
      path:'/params/:newsId(\\d+)/:newsTitle',
      component:Params,
      beforeEnter:(to,from,next)=>{
        console.log('我进入了params模板');
        console.log(to);
        console.log(from);
        next();
}
三个参数：
to:路由将要跳转的路径信息，信息是包含在对像里边的。
from:路径跳转前的路径信息，也是一个对象的形式。
next:路由的控制参数，常用的有next(true)和next(false)。
写在params.vue模板里的路由钩子函数。它可以监控到路由的进入和路由的离开，也可以轻易的读出to和from的值。
beforeRouteEnter：在路由进入前的钩子函数。
beforeRouteLeave：在路由离开前的钩子函数。
export default {
  name: 'params',
  data () {
    return {
      msg: 'params page'
    }
  },
  beforeRouteEnter:(to,from,next)=>{
    console.log("准备进入路由模板");
    next();
  },
  beforeRouteLeave: (to, from, next) => {
    console.log("准备离开路由模板");
    next();
  }
}
</script>
十一：编程式导航（在业务逻辑代码中实现导航。）
App.vue
<button @click="goback">后退</button>
 <button @click="goHome">回到首页</button>
export default {
 
 name: 'app',

  methods:{
 
   goback(){
  
    this.$router.go(-1);
 
   },
  
  goHome(){
   
   this.$router.push('/');
  
  }
 
 }

}



